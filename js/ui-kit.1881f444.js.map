{"version":3,"file":"js/ui-kit.1881f444.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,cAAc,WAAW,EAAE,uBAAuB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;ACpKe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACjEe;AACf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;;;;;;UCtBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNkD;AACK;AACK;;AAE5D;AACA;AACA;;AAEA,gCAAgC,8DAAc;AAC9C,wCAAwC,oEAAkB;AAC1D,sEAAW","sources":["webpack://metalamp-2/./src/dropdown/dropdown.js","webpack://metalamp-2/./src/range-slider/range-slider.js","webpack://metalamp-2/./src/rate-button/rate-button.js","webpack://metalamp-2/webpack/bootstrap","webpack://metalamp-2/webpack/runtime/define property getters","webpack://metalamp-2/webpack/runtime/hasOwnProperty shorthand","webpack://metalamp-2/webpack/runtime/make namespace object","webpack://metalamp-2/./src/ui-kit/ui-kit.js"],"sourcesContent":["export default function updateDropdown(id) {\n  const dropdown = document.getElementById(id);\n  const optionsArr = dropdown.querySelectorAll('.dropdown__option');\n  const label = dropdown.querySelector('label');\n  const clearButton = dropdown.querySelectorAll('.button-link')[1] || null;\n  const type = dropdown.classList.contains('dropdown__guests') ? 'guests' : 'convenience';\n  const optionsNums = dropdown.id === 'dropdown-guests-exp-1'||dropdown.id === 'card-room-cost-dropdown' ? [2, 1, 0] :\n    dropdown.id === 'dropdown-convenience' || dropdown.id === 'dropdown-convenience-exp' ? [2, 2, 0] :\n    dropdown.id === 'search-room-dropdown-guests' ? [2, 1, 1] : [0, 0, 0];\n\n  const returnOptionString = (optionNum, labelsArr) => {\n    let labelsIndex = 0;\n    if (optionNum > 1 && optionNum < 5) {\n      labelsIndex = 1;\n    } else if (optionNum > 4) {\n      labelsIndex = 2;\n    }\n    return `${optionNum} ${labelsArr[labelsIndex]}`;\n  }\n\n  const updateGuestsLabel = () => {\n    const resultStringArr = [];\n    const guestsNum = optionsNums[0] + optionsNums[1];\n    const babyNum = optionsNums[2];\n    if (guestsNum > 0) {\n      const guestsStr = returnOptionString(guestsNum, ['гость', 'гостя', 'гостей']);\n      resultStringArr.push(guestsStr);\n    }\n    if (babyNum > 0) {\n      const babiesStr = returnOptionString(babyNum, ['младенец', 'младенца', 'младенцев']);\n      resultStringArr.push(babiesStr);\n    }\n    if (!resultStringArr.length) {\n      resultStringArr.push('Сколько гостей');\n    }\n    label.textContent = resultStringArr.join(', ');\n  }\n\n  const updateLabel = () => {\n    const optionsLabels = [\n      ['спальня', 'спальни', 'спален'],\n      ['кровать', 'кровати', 'кроватей'],\n      ['ванная комната', 'ванные комнаты', 'ванных комнат']\n    ];\n    const resultStringArr = [];\n    optionsNums.forEach((item, index) => {\n      if (item > 0) {\n        const itemStr = returnOptionString(item, optionsLabels[index]);\n        resultStringArr.push(itemStr);\n      }\n    })\n    if (!resultStringArr.length) {\n      resultStringArr.push('Удобства');\n    }\n    if (resultStringArr.length > 1) {\n      resultStringArr.length = 2;\n      label.textContent = resultStringArr.join(', ') + '...';\n    } else {\n      label.textContent = resultStringArr[0];\n    }\n  }\n  \n  const updateOptionsNums = (num, value) => {\n    optionsNums[num] = +value;\n  }\n\n  const unactiveButton = (button) => {\n    button.disabled = true;\n    if (!button.classList.contains('dropdown__set-option-num_unactive')) {\n      button.classList.add('dropdown__set-option-num_unactive');\n    }\n  }\n\n  const activeButton = (button) => {\n    button.disabled = false;\n    if (button.classList.contains('dropdown__set-option-num_unactive')) {\n      button.classList.remove('dropdown__set-option-num_unactive');\n    }\n  }\n\n  const checkClearButtonActive = () => {\n    if (clearButton !== null) {\n      if (Math.max(...optionsNums) > 0) {\n        clearButton.classList.remove('dropdown__unactive-button');\n        clearButton.disabled = false;\n      } else {\n        clearButton.classList.add('dropdown__unactive-button');\n        clearButton.disabled = true;\n      }\n    }\n  }\n\n  optionsArr.forEach((element, index) => {\n    const [decreaseButton, increaseButton] = element.querySelectorAll('button');\n    const input = element.querySelector('input');\n\n    const updateOptionsButtons = () => {\n      if (input.value == 0) {\n        unactiveButton(decreaseButton);\n      } else {\n        activeButton(decreaseButton);\n      }\n      if (input.value == 9) {\n        unactiveButton(increaseButton);\n      } else {\n        activeButton(increaseButton);\n      }\n    }\n\n    const updateOption = (event) => {\n      event.preventDefault();\n      if (event.target === decreaseButton) {\n        input.value = Number(input.value) - 1\n      } else {\n        input.value = Number(input.value) + 1\n      }\n      updateOptionsButtons();\n      updateOptionsNums(index, input.value);\n      if (type === 'guests') {\n        updateGuestsLabel();\n      } else {\n        updateLabel();\n      }\n      checkClearButtonActive();\n    }\n\n    updateOptionsButtons();\n    increaseButton.addEventListener('click', updateOption);\n    decreaseButton.addEventListener('click', updateOption);\n  })\n\n  const clearForm = () => {\n    const inputs = dropdown.querySelectorAll('input[type=number]');\n\n    inputs.forEach((input) => input.value = 0);    \n    for(let i=0; i < 3; i += 1) {\n      updateOptionsNums(i, 0);\n    };\n\n    const decreaseButtons = dropdown.querySelectorAll('.dropdown__decrease-option-num');\n    const increaseButtons = dropdown.querySelectorAll('.dropdown__increase-option-num');\n\n    for (let i = 0; i < decreaseButtons.length; i += 1) {\n      unactiveButton(decreaseButtons[i]);\n      activeButton(increaseButtons[i]);\n    }\n    checkClearButtonActive();\n    if (type === 'guests') {\n      updateGuestsLabel();\n    } else {\n      updateLabel();\n    }\n  }\n  \n  if(clearButton !== null) {\n    clearButton.addEventListener('click', clearForm);\n  }\n  \n  checkClearButtonActive();\n  if (type === 'guests') {\n    updateGuestsLabel();\n  } else {\n    updateLabel();\n  }\n}\n","export default function rangeSlider() {\n  const labels = document.querySelectorAll('.range-slider__label');\n  let labelMin = labels[0];\n  let labelMax = labels[1];\n  const inputs = document.querySelectorAll('.range-slider__input');\n  const inputWrapper = document.getElementById('range-input-wrapper');\n  const wrapperClientRect = inputWrapper.getBoundingClientRect();  \n  \n  const returnInputMin = () => {\n    if(+inputs[0].value < +inputs[1].value) {\n      return inputs[0];\n    }\n    return inputs[1];\n  }\n  \n  const returnInputMax = () => {\n    if(+inputs[0].value < +inputs[1].value) {\n      return inputs[1];\n    }\n    return inputs[0];\n  }\n\n  const returnCurrentMinValueCoordinateX = () => {\n    return Math.ceil((returnInputMin().value/15000)*wrapperClientRect.width) + wrapperClientRect.x;\n  }\n\n  const returnCurrentMaxValueCoordinateX = () => {\n    return Math.ceil((returnInputMax().value/15000)*wrapperClientRect.width) + wrapperClientRect.x;\n  }\n\n  const updateLabelsInfo = () => {\n    const formatStr = (num) => {\n      const numStr = String(num);\n      let result;\n      if(num > 999) {\n        result = numStr.slice(0, -3) + ' ' + numStr.slice(-3);\n      } else {\n        result = numStr;\n      }\n      return result + \"₽\";\n    }\n    labelMin.textContent = formatStr(returnInputMin().value);\n    labelMax.textContent = formatStr(returnInputMax().value);\n  }\n\n  const updateInputs = (event)=> {\n    if (Math.abs(event.target.value - returnInputMin().value) > Math.abs(event.target.value - returnInputMax().value)) {\n      returnInputMax().value = event.target.value\n    } else {\n      returnInputMin().value = event.target.value\n    }\n\n    updateLabelsInfo();\n    updateTracksViews();\n  }\n\n  const updateTracksViews = () => {\n    const [trackFirst, trackActive, trackLast] = document.querySelectorAll('.range-slider__track');\n    trackFirst.style.width = returnCurrentMinValueCoordinateX() - wrapperClientRect.x + 'px';\n    trackActive.style.width = returnCurrentMaxValueCoordinateX() - returnCurrentMinValueCoordinateX() + 'px';\n    trackLast.style.width = wrapperClientRect.x + wrapperClientRect.width - returnCurrentMaxValueCoordinateX() + 'px';\n  }\n\n  updateLabelsInfo();\n  inputs[2].addEventListener('input', updateInputs);\n}","export default function updateRatingButton(formID) {\n  const rateButtonForm = document.getElementById(formID);\n\n  const formLabels = rateButtonForm.querySelectorAll('.rate-button__label');\n\n  const removeActiveLabels = () => {\n    formLabels.forEach((element) => {\n      if(element.classList.contains('rate-button__label_active')) {\n        element.classList.remove('rate-button__label_active')\n      }\n    });\n  };\n\n  const actualizeActiveLabels = (event) => {\n    removeActiveLabels();\n    const num = +event.target.id.slice(-1);\n    for (let i = 0; i < num; i += 1) {\n      formLabels[i].classList.add('rate-button__label_active');\n    }\n  }\n\n  rateButtonForm.addEventListener('click', actualizeActiveLabels);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import updateDropdown from \"../dropdown/dropdown\";\nimport rangeSlider from \"../range-slider/range-slider\";\nimport updateRatingButton from \"../rate-button/rate-button\";\n\nconst dropdowns = document.querySelectorAll('.dropdown');\nconst ratingButtons = document.querySelectorAll('.rate-button__form');\nconsole.log(dropdowns);\n\ndropdowns.forEach((dropdown) => updateDropdown(dropdown.id));\nratingButtons.forEach((ratingButton) => updateRatingButton(ratingButton.id));\nrangeSlider();\n"],"names":[],"sourceRoot":""}